<?xml version="1.0"?>
<!-- 
	This is a differential drive robot badly 
        modelled after the Nomadic Superscout
        robot.

        This robot has a single sonar transducer
        
        If the robot weighs about 10kg, the density (assuming no input from wheels and caster)
        V=36x40x30 cm^3 + 3.14 x 18^2 x 8 = 51339cm^3 or density is .1948 g/cm^3

        base is 36x40x30 x 0.1948 = 8.4kg
        sonar is 3.14x18^2x8 x 0.1948 = 1.6kg
        each wheel is 0.01kg
        each part of the caster is 0.01kg

	Version 1.0.
	Copyright (c) Michael Jenkin and Gregory Dudek.

	-->




<robot name="$(arg name)" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define the robot -->
  <xacro:property name="robot_base_width" value="0.36" />
  <xacro:property name="robot_base_length" value="0.4" />
  <xacro:property name="robot_base_height" value="0.3" />
  <xacro:property name="robot_base_mass" value="4.5" />
  <xacro:property name="robot_sonar_radius" value="0.18" />
  <xacro:property name="robot_sonar_height" value="0.08" />
  <xacro:property name="robot_wheel_zoffset" value="-0.06" />
  <xacro:property name="robot_wheel_xoffset" value="0.08" />
  <xacro:property name="robot_wheel_radius" value="0.14" />
  <xacro:property name="robot_wheel_width" value="0.02" />
  <xacro:property name="robot_caster_link_height" value="0.03" />
  <xacro:property name="robot_caster_link_width" value="0.03" />
  <xacro:property name="robot_caster_link_length" value="0.05" />
  <xacro:property name="robot_caster_link_offset" value="-0.025" />
  <xacro:property name="robot_caster_joint_offset" value="-0.15" />
  <xacro:property name="robot_caster_wheel_radius" value="0.02" />

  <!-- Import colors defined externally -->
  <xacro:include filename="$(find cpmr_ch4)/colors.xacro" />

  <!-- Define macros to make moments of inertia easier -->
  <xacro:macro name="I_cylinder" params="m r h">
    <inertial>
      <mass value="${m}" />
      <inertia  ixx="${m*(3*r*r+h*h)/12}" iyy="${m*(3*r*r+h*h)/12}" izz="${m*r*r/2}"
              ixy = "0" ixz = "0" iyz = "0" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="I_cuboid" params="m x y z">
    <inertial>
      <mass value="${m}" />
      <inertia  ixx="${m*(y*y+z*z)/12}" iyy="${m*(x*x+z*z)/12}" izz="${m*(x*x+z*z)/12}"
                ixy = "0" ixz = "0" iyz = "0" />
    </inertial>
  </xacro:macro>

  <!-- robot footprint -->
  <link name="base_footprint">
  </link>

  <!-- Base -->
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${robot_base_length} ${robot_base_width} ${robot_base_height}" />
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="${robot_base_length} ${robot_base_width} ${robot_base_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="8.4" x="${robot_base_length}" y="${robot_base_width}" z="${robot_base_height}" />
  </link>

  <!-- Sonar unit -->
  <gazebo reference="sonar_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <link name="sonar_link">
    <visual>
      <geometry>
        <cylinder length="${robot_sonar_height}" radius="${robot_sonar_radius}" />
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_sonar_height}" radius="${robot_sonar_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="8.4" r="${robot_sonar_radius}" h="${robot_sonar_height}" />
  </link>

  <joint name="base_joint" type="fixed">
    <origin xyz="0.0 0.0 ${robot_wheel_radius-robot_wheel_zoffset}" rpy="0.0 0.0 0.0" />
    <parent link="base_footprint" />
    <child link="base_link" />
    <axis xyz="0 0 1" />
  </joint>

  <joint name="sonar_joint" type="fixed">
    <origin xyz="0.0 0.0 ${robot_base_height/2+robot_sonar_height/2}" rpy="0.0 0.0 0.0" />
    <parent link="base_link" />
    <child link="sonar_link" />
    <axis xyz="0 0 1" />
  </joint>

  <gazebo reference="sonar_link">
    <sensor type="ray" name="sonar"> 
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>9</samples>
            <resolution>1</resolution>
            <min_angle>-0.1309</min_angle>
            <max_angle>0.1309</max_angle>
          </horizontal>
          <vertical>
            <samples>9</samples>
            <resolution>1</resolution>
            <min_angle>-0.1309</min_angle>
            <max_angle>0.1309</max_angle>
          </vertical>
        </scan>
        <range>
          <min>${robot_sonar_radius+0.1}</min>
          <max>${robot_sonar_radius+5}</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="sonar_plugin" filename="libgazebo_ros_ray_sensor.so">
        <frame_name>sonar_link</frame_name>
        <updateRate>10</updateRate>
        <radiation>ultrasound</radiation>
        <output_type>sensor_msgs/Range</output_type>
        <ros>
          <remapping>~/out:=sonar</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>


  <!-- Left wheel -->
  <gazebo reference="left_wheel_link">
    <material>Gazebo/Red</material>
  </gazebo>
  <link name="left_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
      <material name="red" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="left_wheel_link" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${robot_base_width/2+robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <!-- Right wheel -->
  <gazebo reference="right_wheel_link">
    <material>Gazebo/Green</material>
  </gazebo>
  <link name="right_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
      <material name="green" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="right_wheel_link" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${-robot_base_width/2-robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <!-- Caster 'wheel' structure -->
  <gazebo reference="caster_link">
    <material>Gazebo/Silver</material>
  </gazebo>

  <link name="caster_link">
    <visual>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
      <material name="silver"/>
    </visual>
    <collision>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="0.1" x="${robot_caster_link_length}" y="${robot_caster_link_width}" z="${robot_caster_link_height}" />
  </link>

  <joint name="caster_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="caster_link" />
    <origin rpy="0 0 3.1415" xyz="${robot_caster_joint_offset} 0 ${-robot_base_height/2-robot_caster_link_height/2}" />
  </joint>


  <!-- caster wheel -->
  <gazebo reference="caster_wheel_link">
    <material>Gazebo/Silver</material>
  </gazebo>
  <link name="caster_wheel_link">
    <visual>
      <geometry>
        <cylinder length="${robot_caster_link_height}" radius="${robot_caster_wheel_radius}" />
      </geometry>
      <material name="silver" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_caster_link_height}" radius="${robot_caster_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_caster_wheel_radius}" h="${robot_caster_link_height}" />
  </link>

  <joint name="caster_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <child link="caster_wheel_link" />
    <parent link="caster_link" />
    <origin rpy="1.5708 0 0" xyz="${robot_caster_link_length} 0 ${-robot_caster_link_height/2}" />
  </joint>

  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <joint_name>caster_wheel_joint</joint_name>
      <joint_name>caster_joint</joint_name>
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <update_rate>20</update_rate>
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <wheel_separation>${robot_base_width+robot_wheel_width}</wheel_separation>
      <wheel_diameter>${2*robot_wheel_radius}</wheel_diameter>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      <command_topic>cmd_vel</command_topic>
    </plugin>
  </gazebo>
</robot>
