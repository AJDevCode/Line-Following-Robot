<?xml version="1.0"?>
<!-- 
	This is a differential drive robot badly 
        modelled after the wheelchair

        This robot has a camera
        
	Version 1.2a.
	-->




<robot name="$(arg name)" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define the robot -->
  <xacro:arg name="camera_tilt" default="0.0" />
  <xacro:property name="camera_tilt" value="$(arg camera_tilt)" />
  <xacro:arg name="show_video" default="true" />
  <xacro:property name="show_video" value="$(arg show_video)" />
  <xacro:arg name="robot_name" default="chair" />
  <xacro:property name="robot_name" value="$(arg name)" />
  <xacro:property name="robot_base_width" value="0.556" />
  <xacro:property name="robot_base_length" value="0.504" />
  <xacro:property name="robot_base_height" value="0.762" />
  <xacro:property name="robot_base_mass" value="4.5" />
  <xacro:property name="robot_wheel_zoffset" value="-0.457" />
  <xacro:property name="robot_wheel_xoffset" value="-0.252" />
  <xacro:property name="robot_wheel_radius" value="0.206" />
  <xacro:property name="robot_wheel_width" value="0.02" />
  <xacro:property name="robot_caster_link_height" value="0.179" />
  <xacro:property name="robot_caster_link_width" value="0.03" />
  <xacro:property name="robot_caster_link_length" value="0.03" />
  <xacro:property name="robot_caster_link_offset" value="-0.025" />
  <xacro:property name="robot_caster_joint_offset" value="${robot_base_length/2}" />
  <xacro:property name="robot_caster_wheel_radius" value="0.098" />
  <xacro:property name="robot_caster_wheel_width" value="0.02" />
  <xacro:property name="robot_camera_length" value="0.02" />
  <xacro:property name="robot_camera_width" value="0.02" />
  <xacro:property name="robot_camera_height" value="0.02" />
  <xacro:property name="robot_camera_xoffset" value="-0.4" />
  <xacro:property name="robot_camera_zoffset" value="1.1" />

  <!-- Import colors defined externally -->
  <xacro:include filename="$(find cpmr_ch11)/colors.xacro" />

  <!-- Define macros to make moments of inertia easier -->
  <xacro:macro name="I_cylinder" params="m r h">
    <inertial>
      <mass value="${m}" />
      <inertia  ixx="${m*(3*r*r+h*h)/12}" iyy="${m*(3*r*r+h*h)/12}" izz="${m*r*r/2}"
              ixy = "0" ixz = "0" iyz = "0" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="I_cuboid" params="m x y z">
    <inertial>
      <mass value="${m}" />
      <inertia  ixx="${m*(y*y+z*z)/12}" iyy="${m*(x*x+z*z)/12}" izz="${m*(x*x+z*z)/12}"
                ixy = "0" ixz = "0" iyz = "0" />
    </inertial>
  </xacro:macro>

  <!-- robot footprint -->
  <link name="base_footprint">
  </link>

  <!-- Base -->
  <link name="base_link">
    <visual>
      <origin rpy="1.57 0 -1.57" xyz="-0.3 0.0 0.4" />
      <geometry>
        <mesh filename="$(find cpmr_ch11)/emptychair.obj" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="${robot_base_length} ${robot_base_width} ${robot_base_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="8.4" x="${robot_base_length}" y="${robot_base_width}" z="${robot_base_height}" />
  </link>

  <joint name="base_joint" type="fixed">
    <origin xyz="0.0 0.0 ${robot_wheel_radius-robot_wheel_zoffset}" rpy="0.0 0.0 0.0" />
    <parent link="base_footprint" />
    <child link="base_link" />
    <axis xyz="0 0 1" />
  </joint>


  <!-- Cameraunit -->
  <gazebo reference="camera_link">
    <material>Gazebo/Green</material>
  </gazebo>
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="${robot_camera_length} ${robot_camera_width} ${robot_camera_height}" />
      </geometry>
      <material name="green"/>
    </visual>
    <collision>
      <geometry>
        <box size="${robot_camera_length} ${robot_camera_width} ${robot_camera_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="0.01" x="${robot_camera_length}" y="${robot_camera_width}" z="${robot_camera_height}" />
  </link>

  <joint name="camera_joint" type="fixed">
    <origin xyz="${robot_camera_xoffset} 0.0 ${robot_camera_zoffset+robot_camera_height/2}" rpy="0 ${camera_tilt} 0" />
    <parent link="base_link" />
    <child link="camera_link" />
    <axis xyz="0 0 1" />
  </joint>

  <gazebo reference="camera_link">
    <sensor type="camera" name="camera"> 
      <visualize>${show_video}</visualize>
      <camera>
        <horizontal_fov>${65 * 3.1415/180}</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>50.0</far>
        </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>/${robot_name}</namespace>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>camera_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Left wheel -->
  <link name="left_wheel">
    <visual>
      <!-- origin rpy="0 1.5708 0" xyz="0 0 0" -->
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="left_wheel" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${robot_base_width/2+robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <!-- Right wheel -->
  <link name="right_wheel">
    <visual>
      <!-- origin rpy="0 1.5708 0" xyz="0 0 0" -->
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_wheel_width}" radius="${robot_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_wheel_radius}" h="${robot_wheel_width}" />
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="right_wheel" />
    <origin rpy="-1.5708 0 0" xyz="${robot_wheel_xoffset} ${-robot_base_width/2-robot_wheel_width/2} ${robot_wheel_zoffset}" />
  </joint>

  <!-- Caster 'wheel' structure -->
  <gazebo reference="left_caster_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <link name="left_caster_link">
    <visual>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="0.1" x="${robot_caster_link_length}" y="${robot_caster_link_width}" z="${robot_caster_link_height}" />
  </link>

  <gazebo reference="right_caster_link">
    <material>Gazebo/Green</material>
  </gazebo>

  <link name="right_caster_link">
    <visual>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
      <material name="green"/>
    </visual>
    <collision>
      <origin xyz="${robot_caster_link_length/2} 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${robot_caster_link_length} ${robot_caster_link_width} ${robot_caster_link_height}" />
      </geometry>
    </collision>
    <xacro:I_cuboid m="0.1" x="${robot_caster_link_length}" y="${robot_caster_link_width}" z="${robot_caster_link_height}" />
  </link>

  <joint name="left_caster_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="left_caster_link" />
    <origin rpy="0 0 3.1415" xyz="${robot_caster_joint_offset-robot_caster_link_width/2} ${robot_base_width/2-robot_caster_link_length/2-0.015} ${-robot_base_height/2-robot_caster_link_height/2}" />
  </joint>

  <joint name="right_caster_joint" type="continuous">
    <axis xyz="0 0 1" />
    <parent link="base_link" />
    <child link="right_caster_link" />
    <origin rpy="0 0 3.1415" xyz="${robot_caster_joint_offset-robot_caster_link_width/2} ${-robot_base_width/2+robot_caster_link_length/2+0.015} ${-robot_base_height/2-robot_caster_link_height/2}" />
  </joint>


  <!-- caster wheel -->
  <gazebo reference="left_caster_wheel">
    <material>Gazebo/Red</material>
  </gazebo>
  <link name="left_caster_wheel">
    <visual>
      <geometry>
        <cylinder length="${robot_caster_wheel_width}" radius="${robot_caster_wheel_radius}" />
      </geometry>
      <material name="red" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_caster_wheel_width}" radius="${robot_caster_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_caster_wheel_width}" h="${robot_caster_link_height}" />
  </link>

  <gazebo reference="right_caster_wheel">
    <material>Gazebo/Green</material>
  </gazebo>
  <link name="right_caster_wheel">
    <visual>
      <geometry>
        <cylinder length="${robot_caster_wheel_width}" radius="${robot_caster_wheel_radius}" />
      </geometry>
      <material name="red" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${robot_caster_wheel_width}" radius="${robot_caster_wheel_radius}" />
      </geometry>
    </collision>
    <xacro:I_cylinder m="0.1" r="${robot_caster_wheel_width}" h="${robot_caster_link_height}" />
  </link>

  <joint name="left_caster_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <child link="left_caster_wheel" />
    <parent link="left_caster_link" />
    <origin rpy="1.5708 0 0" xyz="${robot_caster_link_length} 0 ${-robot_caster_link_height/2}" />
  </joint>

  <joint name="right_caster_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <child link="right_caster_wheel" />
    <parent link="right_caster_link" />
    <origin rpy="1.5708 0 0" xyz="${robot_caster_link_length} 0 ${-robot_caster_link_height/2}" />
  </joint>


  <gazebo>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <namespace>/${robot_name}</namespace>
      </ros>
      <update_rate>100</update_rate>
      <joint_name>left_caster_wheel_joint</joint_name>
      <joint_name>right_caster_wheel_joint</joint_name>
      <joint_name>left_caster_joint</joint_name>
      <joint_name>right_caster_joint</joint_name>
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/${robot_name}</namespace>
      </ros>
      <update_rate>20</update_rate>
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <wheel_separation>${robot_base_width+robot_wheel_width}</wheel_separation>
      <wheel_diameter>${2*robot_wheel_radius}</wheel_diameter>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_frame>${robot_name}/odom</odometry_frame>
      <robot_base_frame>${robot_name}/base_footprint</robot_base_frame>
      <command_topic>cmd_vel</command_topic>
    </plugin>
  </gazebo>
</robot>

